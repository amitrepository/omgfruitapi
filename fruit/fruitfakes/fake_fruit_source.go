// This file was generated by counterfeiter
package fruitfakes

import (
	"io"
	"sync"

	"github.com/jwfriese/omgfruitapi/fruit"
)

type FakeFruitSource struct {
	GetNextFruitStub        func() (string, string, io.Reader)
	getNextFruitMutex       sync.RWMutex
	getNextFruitArgsForCall []struct{}
	getNextFruitReturns     struct {
		result1 string
		result2 string
		result3 io.Reader
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFruitSource) GetNextFruit() (string, string, io.Reader) {
	fake.getNextFruitMutex.Lock()
	fake.getNextFruitArgsForCall = append(fake.getNextFruitArgsForCall, struct{}{})
	fake.recordInvocation("GetNextFruit", []interface{}{})
	fake.getNextFruitMutex.Unlock()
	if fake.GetNextFruitStub != nil {
		return fake.GetNextFruitStub()
	} else {
		return fake.getNextFruitReturns.result1, fake.getNextFruitReturns.result2, fake.getNextFruitReturns.result3
	}
}

func (fake *FakeFruitSource) GetNextFruitCallCount() int {
	fake.getNextFruitMutex.RLock()
	defer fake.getNextFruitMutex.RUnlock()
	return len(fake.getNextFruitArgsForCall)
}

func (fake *FakeFruitSource) GetNextFruitReturns(result1 string, result2 string, result3 io.Reader) {
	fake.GetNextFruitStub = nil
	fake.getNextFruitReturns = struct {
		result1 string
		result2 string
		result3 io.Reader
	}{result1, result2, result3}
}

func (fake *FakeFruitSource) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNextFruitMutex.RLock()
	defer fake.getNextFruitMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFruitSource) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fruit.FruitSource = new(FakeFruitSource)
